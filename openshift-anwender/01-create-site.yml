---
- name: create new site instance
  hosts: localhost
  vars:
    external_hostname: "www.openshift-anwender.de"
    ocp_project_name: "ocp-anwender-community"
    ocp_project_display_name: "OpenShift Anwender Community"
    ocp_project_description: "Website and resources for the German OpenShift users community (http://www.openshift-anwender.de/)."
    ocp_app_name: "openshift-anwender"
    wp_blog_title: "OpenShift Anwender Community"
    wp_admin_user: "admin"
    wp_admin_email: "sebastian.faulhaber@redhat.com"
    wp_options_blogdescription: "Die Community Seite f√ºr alle Anwender & Interessierte der Red Hat OpenShift Container Plattform"
    wp_options_timezone: "Europe/Berlin"
    wp_options_siteurl: "http://{{ external_hostname }}"
    wp_options_home: "http://{{ external_hostname }}"
  tasks:
    - name: install vanilla wordpress
      block:
      - name: create project
        shell: 'oc new-project {{ ocp_project_name }} --display-name="{{ ocp_project_display_name }}" --description="{{ ocp_project_description }}"'
      - name: create wordpress template from github
        shell: 'oc create -f https://raw.githubusercontent.com/sebastianfaulhaber/wordpress-quickstart/master/templates/classic-standalone.json'      
      - name: create wordpress instance from template
        shell: 'oc new-app --template=wordpress-classic-standalone -p APPLICATION_NAME="{{ ocp_app_name }}" -p QUICKSTART_REPOSITORY_URL="https://github.com/sebastianfaulhaber/wordpress-quickstart/"'
      - name: create external route
        shell: 'oc create route edge {{ ocp_app_name }}-ext --service={{ ocp_app_name }} --hostname={{ external_hostname }} --insecure-policy=Allow'
      - name: get temporary hostname from internal route
        shell: 'oc get route {{ ocp_app_name }} --template={% raw %}{{.spec.host}}{% endraw %}'
        register: ocp_app_temp_hostname
      - name: set temporary password from dc
        shell: 'oc get deploymentconfig {{ ocp_app_name }} --template={% raw %}{{.metadata.uid}}{% endraw %}'
        register: wp_admin_password
      - name: wait for pod to come up
        wait_for: timeout=120
      - name: finish wordpress installation wizard
        shell: 'curl "http://{{ ocp_app_temp_hostname.stdout }}/wp-admin/install.php?step=2" --data-urlencode "weblog_title={{ wp_blog_title }}" --data-urlencode "user_name={{ wp_admin_user }}" --data-urlencode "admin_email={{ wp_admin_email }}" --data-urlencode "admin_password={{ wp_admin_password.stdout }}" --data-urlencode "admin_password2={{ wp_admin_password.stdout }}" --data-urlencode "pw_weak=1"'

    - name: customize wordpress with wp-cli
      tags: wp-cli
      block:
      - name: get wordpress pod id
        shell: 'oc get pod -l deploymentconfig={{ ocp_app_name }} -o=jsonpath="{.items[0].metadata.name}"'
        register: ocp_wp_pod_id  
      - name: download wp-cli into pod
        shell: 'oc rsh {{ ocp_wp_pod_id.stdout }} wget https://raw.githubusercontent.com/sebastianfaulhaber/openshift-v3-showcase/master/openshift-anwender/res/wp-cli.phar'
      - name: wp-cli install wordpress plugins
        shell: 'oc rsh {{ ocp_wp_pod_id.stdout }} php wp-cli.phar plugin install {{ item }} --activate'
        with_items:
          - akismet
          - jetpack
          - wordpress-importer
          - google-analytics-dashboard-for-wp
      - name: wp-cli install language
        shell: 'oc rsh {{ ocp_wp_pod_id.stdout }} php wp-cli.phar language core install de_DE --activate' 
      - name: wp-cli set options
        shell: 'oc rsh {{ ocp_wp_pod_id.stdout }} php wp-cli.phar option update {{ item.option }} "{{ item.value }}"'
        with_items:
          - { option: 'timezone_string', value: '{{ wp_options_timezone }}' }
          - { option: 'blogdescription', value: '{{ wp_options_blogdescription }}' }
          - { option: 'siteurl', value: '{{ wp_options_siteurl }}' }
          - { option: 'home', value: '{{ wp_options_home }}' }
      - name: wp-cli delete sample post
        shell: 'oc rsh {{ ocp_wp_pod_id.stdout }} php wp-cli.phar post delete 1'

    - name: finalize install
      block:
      - name: print wordpress login information
        debug:
          msg: 'Wordpress Login information: {{ wp_admin_user }} // {{ wp_admin_password.stdout }}'

          